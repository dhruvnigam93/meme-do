import os
import json
from openai import OpenAI
from dotenv import load_dotenv
from pydantic import BaseModel
from loguru import logger


class Meme(BaseModel):
    id: int
    meme_creation_input: str
    reasoning: str


class MemeList(BaseModel):
    memes: list[Meme]


# Load environment variables
load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=OPENAI_API_KEY)


def generate_meme_content(summary, memes_info, num_memes=3):
    """
    Identifies major events/achievements and recommends meme templates.

    Args:
        summary (str): Summary generated by the summary agent.
        memes_info (list): List of dictionaries containing meme template information.
        num_memes (int): Number of memes to generate.

    Returns:
        list: List of dictionaries with meme IDs and inputs.
    """
    # Construct the prompt
    prompt = f"""
You are a very funny and quirky dramatic, slightly offensice drunk commentator tasked with creating memes based on the following match summary:

context:
{summary}

Here are the available meme templates:

"""
    for meme in memes_info:
        prompt += f"ID: {meme['id']}\n"
        prompt += f"Name: {meme['name']}\n"
        prompt += f"Description: {meme['description']}\n"
        prompt += f"Instruction for generation: {meme['instruction']}\n"
        prompt += "-" * 50 + "\n"

    prompt += f"""
Please choose {num_memes} meme templates from the list above that are most suitable for the match summary provided.
For each chosen meme, provide the inputs needed to create the meme, based on the match summary.
Also, provide a brief reasoning for choosing each meme template. Extra hundred dollars if it is controversial and offensive!
"""

    response = client.beta.chat.completions.parse(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": "You are a creative AI assistant specializing in meme generation."},
            {"role": "user", "content": prompt}
        ],
        temperature=0.7,
        response_format=MemeList,
    )

    logger.info(response)
    generated_text = response.choices[0].message.content.strip()

    try:
        memes_selected = json.loads(generated_text)
    except json.JSONDecodeError:
        print("Error: The generated response is not valid JSON.")
        return []

    return memes_selected
